version: 0.1
component: build
timeoutInSeconds: 1200
shell: bash
env:
  variables:
    REGISTRY: "mx-queretaro-1.ocir.io"
    NAMESPACE: "axvteqzybmr1"
    REPOSITORY: "taskmanager"
    IMAGE_NAME: "todolistapp-springboot"
    IMAGE_VERSION: "0.1"
  exportedVariables:
    - IMAGE_FULL_NAME
    - VERSION
steps:
  - type: Command
    name: "Install Java 11"
    timeoutInSeconds: 600
    command: |
      echo "Installing Java 11..."
      cd /opt
      wget -q https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz
      tar -xzf amazon-corretto-11-x64-linux-jdk.tar.gz
      
      JAVA11_DIR=$(find /opt -maxdepth 1 -name "amazon-corretto-11*" -type d | head -1)
      ln -sf "$JAVA11_DIR" /opt/java11
      echo "Java 11 installed successfully"
      
  - type: Command
    name: "Setup wallet files"
    timeoutInSeconds: 300
    command: |
      echo "Setting up wallet files..."
      
      # Check if wallet already exists in the backend directory
      if [ -d "MtdrSpring/backend/wallet" ]; then
        echo "Wallet directory already exists in backend"
        echo "Current wallet contents:"
        ls -la MtdrSpring/backend/wallet/
        
        # Verify we have essential wallet files
        if [ -f "MtdrSpring/backend/wallet/tnsnames.ora" ]; then
          echo "tnsnames.ora found - wallet setup is complete"
        else
          echo "tnsnames.ora not found in existing wallet!"
          echo "Available files in wallet:"
          ls -la MtdrSpring/backend/wallet/
          exit 1
        fi
      else
        echo "Wallet directory not found in expected location!"
        echo "Checking available directories:"
        find . -name "*wallet*" -type d 2>/dev/null || echo "No wallet directories found"
        exit 1
      fi
      
      echo "Wallet setup completed successfully"
      
  - type: Command
    name: "Test Oracle DB Connection"
    timeoutInSeconds: 300
    command: |
      echo "Testing Oracle DB connection..."
      
      # Navigate to backend directory
      cd MtdrSpring/backend
      
      # Check for application.properties for connection details
      if [ -f "src/main/resources/application.properties" ]; then
        echo "Found application.properties"
        
        # Extract connection details (without showing sensitive data)
        DB_URL=$(grep "^spring.datasource.url" src/main/resources/application.properties | cut -d'=' -f2- | tr -d ' ')
        DB_USER=$(grep "^spring.datasource.username" src/main/resources/application.properties | cut -d'=' -f2- | tr -d ' ')
        
        echo "Found DB URL: MASKED"
        echo "Found DB user: MASKED"
        
        # Use sqlplus to test connection (requires Oracle client)
        if command -v sqlplus >/dev/null 2>&1; then
          echo "Testing connection with sqlplus..."
          echo "exit" | ORACLE_HOME=/opt/oracle/instantclient_19_11 TNS_ADMIN=$(pwd)/wallet sqlplus -L "${DB_USER}/[PASSWORD]@$(echo $DB_URL | awk -F':@' '{print $2}')" 2>&1 | tee connection_test.log
          
          if grep -q "Connected to:" connection_test.log; then
            echo "Database connection successful!"
          else
            echo "Database connection failed. See connection_test.log for details"
            cat connection_test.log
            echo "Wallet contents:"
            ls -la wallet/
            echo "TNS entries:"
            cat wallet/tnsnames.ora
            echo "Warning: Connection test failed but continuing build..."
          fi
        else
          echo "sqlplus not found, creating simple test program..."
          
          # Simple test with Java
          echo "Creating simple JDBC test program..."
          cat > TestConnection.java << 'EOF'
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class TestConnection {
    public static void main(String[] args) {
        String url = System.getenv("DB_URL");
        String user = System.getenv("DB_USER");
        String password = System.getenv("DB_PASSWORD");
        
        System.out.println("Testing connection to Oracle DB...");
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection conn = DriverManager.getConnection(url, user, password);
            System.out.println("Connection successful!");
            conn.close();
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println("Connection failed: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
EOF
          
          echo "WARNING: Skipping connection test - please provide Oracle client or DB password"
          echo "NOTE: Manual test can be performed using the TestConnection.java file"
        fi
      else
        echo "application.properties not found!"
        echo "Available files in resources:"
        ls -la src/main/resources/
        echo "Warning: Cannot test DB connection but continuing build..."
      fi
      
  - type: Command
    name: "Build with Maven"
    timeoutInSeconds: 600
    command: |
      export JAVA_HOME=/opt/java11
      export PATH=$JAVA_HOME/bin:$PATH
      
      echo "Building with Maven..."
      echo "Java version: $(java -version 2>&1 | head -1)"
      
      # Navigate to backend directory
      cd MtdrSpring/backend
      
      # Build with Maven
      mvn clean package spring-boot:repackage -DskipTests
      
      echo "Checking build results:"
      ls -la target/
      
      if [ ! -f "target/MyTodoList-0.0.1-SNAPSHOT.jar" ]; then
        echo "JAR file not found!"
        exit 1
      fi
      
      jar_size=$(stat -c%s "target/MyTodoList-0.0.1-SNAPSHOT.jar" 2>/dev/null || stat -f%z "target/MyTodoList-0.0.1-SNAPSHOT.jar")
      echo "JAR built successfully: ${jar_size} bytes"
      
  - type: Command
    name: "Build Docker image"
    timeoutInSeconds: 600
    command: |
      cd MtdrSpring/backend
      
      # Generate version based on timestamp
      VERSION="$(date +'%Y%m%d-%H%M%S')"
      if [ -d ".git" ]; then
        COMMIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        VERSION="${VERSION}-${COMMIT_SHORT}"
      else
        VERSION="${VERSION}-${IMAGE_VERSION}"
      fi
      
      IMAGE_TAG="${REGISTRY}/${NAMESPACE}/${REPOSITORY}/${IMAGE_NAME}:${VERSION}"
      
      echo "Building Docker image: ${IMAGE_TAG}"
      
      # Create wallet directory if not exists (relative to current dir)
      mkdir -p wallet
      
      # Copy wallet files to wallet/ directory (for Docker build)
      echo "Copying wallet files to build context location..."
      cp -R ../wallet/* wallet/ || echo "Warning: Could not copy wallet files"
      
      # Verify wallet is present before building
      echo "Wallet files before Docker build:"
      ls -la wallet/
      
      # Set correct permissions
      chmod -R 755 wallet/
      
      # Build Docker image
      docker build -f Dockerfile -t "${IMAGE_TAG}" .
      
      if [ $? -ne 0 ]; then
        echo "Docker build failed!"
        exit 1
      fi
      
      echo "Docker image built successfully: ${IMAGE_TAG}"
      
      # Export variables
      export IMAGE_FULL_NAME="${IMAGE_TAG}"
      export VERSION="${VERSION}"
      
      echo "============================================"
      echo "Image successfully built!"
      echo "Image: ${IMAGE_TAG}"
      echo "============================================"
      
      # Create build-output.json in root directory
      cd ../..
      echo "{\"image\":\"${IMAGE_TAG}\",\"imageVersion\":\"${VERSION}\",\"repository\":\"${REPOSITORY}\",\"imageName\":\"${IMAGE_NAME}\"}" > build-output.json
      
outputArtifacts:
  - name: todolist-springboot-image
    type: DOCKER_IMAGE
    location: ${IMAGE_FULL_NAME}
