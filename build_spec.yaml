version: 0.1
component: build
timeoutInSeconds: 1200
shell: bash
env:
  variables:
    REGISTRY: "mx-queretaro-1.ocir.io"
    NAMESPACE: "axvteqzybmr1"
    REPOSITORY: "taskmanager"
    IMAGE_NAME: "todolistapp-springboot"
    IMAGE_VERSION: "0.1"
  exportedVariables:
    - IMAGE_FULL_NAME
    - VERSION
steps:
  - type: Command
    name: "Install Java 11"
    timeoutInSeconds: 600
    command: |
      echo "Installing Java 11..."
      cd /opt
      wget -q https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz
      tar -xzf amazon-corretto-11-x64-linux-jdk.tar.gz
      
      JAVA11_DIR=$(find /opt -maxdepth 1 -name "amazon-corretto-11*" -type d | head -1)
      ln -sf "$JAVA11_DIR" /opt/java11
      echo "Java 11 installed successfully"
      
  - type: Command
    name: "Setup wallet files"
    timeoutInSeconds: 300
    command: |
      echo "Setting up wallet files..."
      
      # Check if wallet already exists in the backend directory
      if [ -d "MtdrSpring/backend/wallet" ]; then
        echo "Wallet directory already exists in backend"
        echo "Current wallet contents:"
        ls -la MtdrSpring/backend/wallet/
        
        # Verify we have essential wallet files
        if [ -f "MtdrSpring/backend/wallet/tnsnames.ora" ]; then
          echo "tnsnames.ora found - wallet setup is complete"
        else
          echo "tnsnames.ora not found in existing wallet!"
          echo "Available files in wallet:"
          ls -la MtdrSpring/backend/wallet/
          exit 1
        fi
      else
        echo "Wallet directory not found in expected location!"
        echo "Checking available directories:"
        find . -name "*wallet*" -type d 2>/dev/null || echo "No wallet directories found"
        exit 1
      fi
      
      echo "Wallet setup completed successfully"
      
  - type: Command
    name: "Test Oracle DB Connection"
    timeoutInSeconds: 300
    command: |
      echo "Testing Oracle DB connection..."
      
      # Navigate to backend directory
      cd MtdrSpring/backend
      
      # Check for application.properties for connection details
      if [ -f "src/main/resources/application.properties" ]; then
        echo "Found application.properties"
        
        # Extract connection details (without showing sensitive data)
        DB_URL=$(grep "^spring.datasource.url" src/main/resources/application.properties | cut -d'=' -f2- | tr -d ' ')
        DB_USER=$(grep "^spring.datasource.username" src/main/resources/application.properties | cut -d'=' -f2- | tr -d ' ')
        
        echo "Found DB URL: ${DB_URL//?/*}"  # Mask the actual URL
        echo "Found DB user: ${DB_USER//?/*}"  # Mask the actual username
        
        # Use sqlplus to test connection (requires Oracle client)
        if command -v sqlplus >/dev/null 2>&1; then
          echo "Testing connection with sqlplus..."
          echo "exit" | ORACLE_HOME=/opt/oracle/instantclient_19_11 TNS_ADMIN=$(pwd)/wallet sqlplus -L "${DB_USER}/[PASSWORD]@$(echo $DB_URL | awk -F':@' '{print $2}')" 2>&1 | tee connection_test.log
          
          if grep -q "Connected to:" connection_test.log; then
            echo "Database connection successful!"
          else
            echo "Database connection failed. See connection_test.log for details"
            cat connection_test.log
            echo "Wallet contents:"
            ls -la wallet/
            echo "TNS entries:"
            cat wallet/tnsnames.ora
            echo "Warning: Connection test failed but continuing build..."
          fi
        else
          echo "sqlplus not found, skipping Oracle client test"
          echo "Checking wallet configuration instead..."
          
          if [ -f "wallet/tnsnames.ora" ]; then
            echo "Wallet files are present:"
            ls -la wallet/
            echo "TNS configuration found:"
            head -5 wallet/tnsnames.ora
            echo "Wallet configuration appears valid"
          else
            echo "WARNING: No wallet files found for DB connection"
          fi
          
          echo "NOTE: DB connection test skipped - Oracle client not available"
        fi
      else
        echo "application.properties not found!"
        echo "Available files in resources:"
        ls -la src/main/resources/
        echo "Warning: Cannot test DB connection but continuing build..."
      fi
      
  - type: Command
    name: "Build with Maven"
    timeoutInSeconds: 600
    command: |
      export JAVA_HOME=/opt/java11
      export PATH=$JAVA_HOME/bin:$PATH
      
      echo "Building with Maven..."
      echo "Java version: $(java -version 2>&1 | head -1)"
      
      # Navigate to backend directory
      cd MtdrSpring/backend
      
      # Build with Maven
      mvn clean package spring-boot:repackage -DskipTests
      
      echo "Checking build results:"
      ls -la target/
      
      if [ ! -f "target/MyTodoList-0.0.1-SNAPSHOT.jar" ]; then
        echo "JAR file not found!"
        exit 1
      fi
      
      jar_size=$(stat -c%s "target/MyTodoList-0.0.1-SNAPSHOT.jar" 2>/dev/null || stat -f%z "target/MyTodoList-0.0.1-SNAPSHOT.jar")
      echo "JAR built successfully: ${jar_size} bytes"
      
  - type: Command
    name: "Build Docker image"
    timeoutInSeconds: 600
    command: |
      cd MtdrSpring/backend
      
      # Generate version based on timestamp
      VERSION="$(date +'%Y%m%d-%H%M%S')"
      if [ -d ".git" ]; then
        COMMIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        VERSION="${VERSION}-${COMMIT_SHORT}"
      else
        VERSION="${VERSION}-${IMAGE_VERSION}"
      fi
      
      IMAGE_TAG="${REGISTRY}/${NAMESPACE}/${REPOSITORY}/${IMAGE_NAME}:${VERSION}"
      
      echo "Building Docker image: ${IMAGE_TAG}"
      
      # Create wallet directory if not exists (relative to current dir)
      mkdir -p wallet
      
      # Copy wallet files to wallet/ directory (for Docker build)
      echo "Copying wallet files to build context location..."
      cp -R ../wallet/* wallet/ || echo "Warning: Could not copy wallet files"
      
      # Verify wallet is present before building
      echo "Wallet files before Docker build:"
      ls -la wallet/
      
      # Set correct permissions
      chmod -R 755 wallet/
      
      # Build Docker image
      docker build -f Dockerfile -t "${IMAGE_TAG}" .
      
      if [ $? -ne 0 ]; then
        echo "Docker build failed!"
        exit 1
      fi
      
      echo "Docker image built successfully: ${IMAGE_TAG}"
      
      # Export variables
      export IMAGE_FULL_NAME="${IMAGE_TAG}"
      export VERSION="${VERSION}"
      
      echo "============================================"
      echo "Image successfully built!"
      echo "Image: ${IMAGE_TAG}"
      echo "============================================"
      
      # Create build-output.json in root directory
      cd ../..
      echo "{\"image\":\"${IMAGE_TAG}\",\"imageVersion\":\"${VERSION}\",\"repository\":\"${REPOSITORY}\",\"imageName\":\"${IMAGE_NAME}\"}" > build-output.json

  - type: Command
    name: "Setup kubectl for deployment"
    timeoutInSeconds: 300
    command: |
      echo "Setting up kubectl configuration for automatic deployment..."
      
      # Get cluster ID from environment or state
      if [ -z "$OKE_CLUSTER_ID" ]; then
        echo "OKE_CLUSTER_ID not set, attempting to get from state..."
        export OKE_CLUSTER_ID=$(state_get OKE_OCID 2>/dev/null || echo "")
      fi
      
      if [ -z "$OKE_CLUSTER_ID" ]; then
        echo "Warning: OKE_CLUSTER_ID not found, using fallback cluster discovery"
        # Try to find cluster by name
        OKE_CLUSTER_ID=$(oci ce cluster list --compartment-id "${OCI_COMPARTMENT_ID}" --name "oke-cluster" --query 'data[0].id' --raw-output 2>/dev/null || echo "")
      fi
      
      if [ -n "$OKE_CLUSTER_ID" ]; then
        echo "Configuring kubectl for cluster: $OKE_CLUSTER_ID"
        oci ce cluster create-kubeconfig --cluster-id "$OKE_CLUSTER_ID" --file ~/.kube/config --region "${OCI_REGION:-mx-queretaro-1}" --token-version 2.0.0
        
        # Test kubectl connection
        kubectl cluster-info
      else
        echo "ERROR: Cannot find OKE cluster for deployment"
        exit 1
      fi

  - type: Command
    name: "Deploy to Kubernetes"
    timeoutInSeconds: 600
    command: |
      echo "Automatically deploying freshly built image to Kubernetes..."
      
      # Create wallet secret first (same as deploy_spec.yaml)
      echo "🔧 Creating database wallet secret for Oracle connectivity..."
      
      # Delete existing secret if it exists
      kubectl delete secret db-wallet-secret -n default --ignore-not-found=true
      
      # Create new secret with wallet files from repository
      if [ -d "MtdrSpring/backend/wallet" ]; then
        kubectl create secret generic db-wallet-secret \
          --from-file=MtdrSpring/backend/wallet/ \
          -n default
        echo "✅ Database wallet secret created successfully!"
      else
        echo "❌ ERROR: Wallet directory not found!"
        exit 1
      fi
      
      # Get the built image from our variables
      BUILT_IMAGE="${REGISTRY}/${NAMESPACE}/${REPOSITORY}/${IMAGE_NAME}:${VERSION}"
      echo "Deploying image: $BUILT_IMAGE"
      
      # Create deployment manifest with correct configuration
      cat > auto-deployment.yaml << EOF
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: agile-deployment
        namespace: default
      spec:
        replicas: 2
        selector:
          matchLabels:
            app: agile-app
        template:
          metadata:
            labels:
              app: agile-app
              version: v1
          spec:
            containers:
              - name: agile-container
                image: ${BUILT_IMAGE}
                imagePullPolicy: Always
                env:
                  - name: db_user
                    value: "TODOUSER"
                  - name: db_url
                    value: "jdbc:oracle:thin:@reacttodoia9ge_tp?TNS_ADMIN=/tmp/wallet"
                  - name: todo.table.name
                    value: "todoitem"
                  - name: driver_class_name
                    value: "oracle.jdbc.OracleDriver"
                  - name: OCI_REGION
                    value: "mx-queretaro-1"
                  - name: dbpassword
                    valueFrom:
                      secretKeyRef:
                        name: dbuser
                        key: dbpassword
                        optional: true
                  - name: ui_username
                    value: "admin"
                  - name: ui_password
                    valueFrom:
                      secretKeyRef:
                        name: frontendadmin
                        key: password
                        optional: true
                volumeMounts:
                  - name: creds
                    mountPath: /tmp/wallet
                ports:
                  - containerPort: 8080
                readinessProbe:
                  httpGet:
                    path: /
                    port: 8080
                  initialDelaySeconds: 60
                  periodSeconds: 10
                livenessProbe:
                  httpGet:
                    path: /
                    port: 8080
                  initialDelaySeconds: 90
                  periodSeconds: 30
            restartPolicy: Always
            volumes:
              - name: creds
                secret:
                  secretName: db-wallet-secret
      EOF
      
      echo "Applying deployment to Kubernetes..."
      kubectl apply -f auto-deployment.yaml
      
      if [ $? -eq 0 ]; then
        echo "✅ Deployment applied successfully!"
        
        # Wait for rollout to complete
        echo "Waiting for deployment rollout..."
        kubectl rollout status deployment/agile-deployment -n default --timeout=300s
        
        echo "============================================"
        echo "🚀 DEPLOYMENT STATUS"
        echo "============================================"
        
        # Get deployment status
        kubectl get deployments -n default -l app=agile-app
        kubectl get pods -n default -l app=agile-app
        kubectl get services -n default -l app=agile-app
        
        # Get load balancer IP (if available)
        EXTERNAL_IP=$(kubectl get svc -n default agile-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
        
        if [ -n "$EXTERNAL_IP" ]; then
          echo "============================================"
          echo "🎉 SUCCESS! Application deployed and accessible at:"
          echo "http://$EXTERNAL_IP"
          echo "============================================"
        else
          echo "Load Balancer IP is being assigned..."
          echo "Check status with: kubectl get svc -n default agile-service --watch"
        fi
        
        echo "Build and deployment completed successfully!"
        
      else
        echo "❌ Deployment failed!"
        exit 1
      fi
outputArtifacts:
  - name: todolist-springboot-image
    type: DOCKER_IMAGE
    location: ${IMAGE_FULL_NAME}